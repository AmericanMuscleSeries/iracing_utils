syntax = "proto3";
package american_muscle_series;
option optimize_for = SPEED;

// Data structures describing the league

enum eGroup
{
  Unknown=0;
  Pro=1;
  Am=2;
}

enum eSortBy
{
  Earned=0;
  ForcedDrops=1;
}

enum ePositionValue
{
  Overall=0;
  Class=1;
}

message GroupRulesData
{
  eGroup    Group          = 1;
  int32     MinCarNumber   = 2;
  int32     MaxCarNumber   = 3;
  int32     NumberOfDrops  = 4;
}

message TimePenaltyData
{
  int32 Race    = 1;
  int32 Driver  = 2;
  int32 Seconds = 3;
}

message ScoringSystemData
{
  int32          PolePosition  = 1;
  int32          FastestLap    = 2;
  int32          LapsLead      = 3;
  int32          MostLapsLead  = 4;
  bool           SeparatePool  = 5; // Use the same pool of points per class or not
  ePositionValue PositionValue = 6; // How to assign a position value to a league with more than one class
}

// Race winner will get TopScore, each subsequent racer will get 1 less point
// Drivers outside of the TopScore will get zero points (not negative points)
message LinearDecentScoringData
{
  ScoringSystemData Base     = 1;
  int32             TopScore = 2;
  bool              Handicap = 3;
}

// Specify the points for each finishing position
message AssignmentScoringData
{
  ScoringSystemData Base          = 1;
  map<int32,int32>  PositionScore = 2; // Key is position, value is the the amount of points awarded
}

message AnyScoringSystemData
{
  oneof System
  {
    LinearDecentScoringData  LinearDecent = 1;
    AssignmentScoringData    Assignment   = 2;
  }
}

message GoogleTabData // Can't make a map with an enum as key :-(
{
  eGroup Group   = 1;
  string TabName = 2;
}
message GoogleSheetsData
{
  string                 Key      = 1;
  repeated GoogleTabData GroupTab = 2;
}

message SeasonConfigurationData
{
  bool                     Active           = 1;
  AnyScoringSystemData     ScoringSystem    = 2;
  repeated int32           NonDrivers       = 3;
  repeated int32           PracticeSessions = 4;
  repeated GroupRulesData  GroupRule        = 5;
  repeated TimePenaltyData TimePenalty      = 6;
  GoogleSheetsData         GoogleSheets     = 7;
  eSortBy                  SortBy           = 8;
}

message LeagueConfigurationData
{
  int32                               iRacingID = 1;
  string                              Name      = 2;
  map<int32, SeasonConfigurationData> Seasons   = 3;
}

// Data structures for holding iRacing data

message LeagueData
{
  map<int32, MemberData> Members = 1; // Key is driver iracing id
  map<int32, SeasonData> Seasons = 2; // Key is season number
}

message MemberData
{
  string    Name     = 1;
  string    Nickname = 2;
}

message SeasonData
{
  map<int32, DriverData> Drivers = 1; // Key is driver iracing id
  map<int32, RaceData>   Races   = 2; // Key is race number
}

message DriverData
{
  string    Name               = 1;
  int32     OldRating          = 2;
  int32     NewRating          = 3;
  int32     CarNumber          = 4;
  eGroup    Group              = 5;
  int32     TotalRaces         = 6;
  // Points
  int32     EarnedPoints       = 7;
  int32     DropPoints         = 8;
  int32     HandicapPoints     = 9;
  int32     CleanDriverPoints  = 10;
  // Pole Position
  int32     TotalPolePositions = 11;
  int32     PolePositionPoints = 12;
  // Finishings
  int32     TotalWins          = 13;
  float     AverageFinish      = 14;
  int32     RaceFinishPoints   = 15;
  int32     TotalIncidents     = 16;
  int32     TotalLapsComplete  = 17;
  // Laps Lead
  int32     TotalLapsLead      = 18;
  int32     LapsLeadPoints     = 19;
  int32     TotalMostLapsLead  = 20;
  int32     MostLapsLeadPoints = 21;
  // Fast Laps
  int32     TotalFastestLaps   = 22;
  int32     FastestLapPoints   = 23;
  // Trueskill
  float     Mu                 = 24;
  float     Sigma              = 25;
}

message GroupStatsData // Can't make a map with an enum as key :-(
{
  eGroup Group                   = 1;
  int32  Count                   = 2;
  int32  PolePositionDriver      = 3;
  int32  PolePosition            = 4;
  int32  WinningPosition         = 5;
  int32  WinningDriver           = 6;
  int32  FastestLapDriver        = 7;
  float  FastestLapTime          = 8;
  int32  MostLapsLeadDriver      = 9;
  int32  MostLapsLead            = 10;
  repeated int32 LapsLeadDrivers = 11;
}

message RaceData
{
  string                  Date       = 1;
  string                  Track      = 2;
  map<int32, ResultData>  Grid       = 3; // key is driver iracing id
  repeated GroupStatsData GroupStats = 4;
}

message ResultData
{
  bool   PolePosition      = 1;
  bool   FastestLap        = 2;
  int32  StartPosition     = 3;
  int32  FinishPosition    = 4;
  int32  Points            = 5;
  int32  HandicapPoints    = 6;
  int32  CleanDriverPoints = 7;
  float  Interval          = 8;
  int32  Incidents         = 9;
  int32  LapsCompleted     = 10;
  int32  LapsLead          = 11;
  bool   MostLapsLead      = 12;
  float  FastestLapTime    = 13;
  float  Mu                = 14; // Trueskill
  float  Sigma             = 15; // Trueskill
}

message EventData
{
  string                      Name         = 1;
  int32                       NumSplits    = 2;
  bool                        IsMulticlass = 3;
  map<int32, EventResultData> Results      = 4; // Key=Split
}

message EventResultData
{
  int32                    StrengthOfField    = 1;
  string                   URL                = 2;
  map<string, int32>       StrengthOfCategory = 3; // Key is category
  map<string, int32>       NumCategoryCars    = 4; // Key is category
  map<string, int32>       NumCategoryLaps    = 5; // Key is category
  map<int32,EventTeamData> Teams              = 6; // Key is iracing team id
}

message EventTeamData
{
  string                   Name                  = 1;
  string                   Category              = 2;
  string                   Car                   = 3;
  string                   ReasonOut             = 4;
  int32                    FinishPosition        = 5;
  int32                    FinishPositionInClass = 6;
  int32                    TotalIncidents        = 7;
  int32                    TotalLapsComplete     = 8;
  map<int32, DriverData>   Drivers               = 9;  // Key is driver iracing id
  map<int32, MemberData>   Members               = 10; // Key is driver iracing id
}


syntax = "proto3";
package american_muscle_series;
option optimize_for = SPEED;

// Data structures describing the league

enum eGroup
{
  Unknown=0;
  Pro=1;
  Am=2;
}

enum eSortBy
{
  Earned=0;
  ForcedDrops=1;
}

message GroupRuleData
{
  int32     MinCarNumber   = 1;
  int32     MaxCarNumber   = 2;
  eGroup    Group          = 3;
}

message GroupRulesData
{
  repeated GroupRuleData GroupRule = 1;
}

message TimePenaltyData
{
  int32 Race   = 1;
  int32 Driver     = 2;
  int32 Seconds    = 3;
}

message ScoringSystemData
{
  int32  PolePosition = 1;
  int32  FastestLap   = 2;
  int32  LapsLead     = 3;
}

// Race winner will get TopScore, each subsequent racer will get 1 less point
// Drivers outside of the TopScore will get zero points (not negative points)
message LinearDecentScoringData
{
  ScoringSystemData Base     = 1;
  int32             TopScore = 2;
}

// Race winner will get TopScore, each subsequent racer will get 1 less point
// Drivers outside of the TopScore will get zero points (not negative points)
message AssignmentScoringData
{
  ScoringSystemData Base          = 1;
  map<int32,int32>  PositionScore = 2; // Key is position, value is the the amount of points awarded
}

message AnyScoringSystemData
{
  oneof System
  {
    LinearDecentScoringData  LinearDecent = 1;
    AssignmentScoringData    Assignment   = 2;
  }
}

message GoogleTabData // Can't make a map with an enum as key :-(
{
  eGroup Group   = 1;
  string TabName = 2;
}
message GoogleSheetsData
{
  string                 Key      = 1;
  repeated GoogleTabData GroupTab = 2;
}

message SeasonConfigurationData
{
  bool                     Active           = 1;
  AnyScoringSystemData     ScoringSystem    = 2;
  int32                    NumDrops         = 3;
  repeated int32           NonDrivers       = 4;
  repeated int32           PracticeSessions = 5;
  GroupRulesData           GroupRules       = 6;
  repeated TimePenaltyData TimePenalty      = 7;
  GoogleSheetsData         GoogleSheets     = 8;
  eSortBy                  SortBy           = 9;
}

message LeagueConfigurationData
{
  int32                               iRacingID = 1;
  string                              Name      = 2;
  map<int32, SeasonConfigurationData> Seasons   = 3;
}

// Data structures for holding iRacing data

message LeagueData
{
  map<int32, MemberData> Members = 1; // Key is driver iracing id
  map<int32, SeasonData> Seasons = 2; // Key is season number
}

message MemberData
{
  string    Name     = 1;
  string    Nickname = 2;
}

message SeasonData
{
  map<int32, DriverData> Drivers = 1; // Key is driver iracing id
  map<int32, RaceData>   Races   = 2; // Key is race number
}

message DriverData
{
  string    Name               = 1;
  int32     CarNumber          = 2;
  eGroup    Group              = 3;
  int32     EarnedPoints       = 4;
  int32     DropPoints         = 5;
  int32     CleanDriverPoints  = 6;
  int32     TotalFastestLaps   = 7;
  int32     TotalIncidents     = 8;
  int32     TotalLapsComplete  = 9;
  int32     TotalLapsLead      = 10;
  int32     TotalPolePositions = 11;
  int32     TotalRaces         = 12;
  float     Mu                 = 13;// Trueskill
  float     Sigma              = 14; // Trueskill
}

message GroupStatsData // Can't make a map with an enum as key :-(
{
  eGroup Group              = 1;
  int32  Count              = 2;
  int32  PolePositionDriver = 3;
  int32  PolePosition       = 4;
  int32  FastestLapDriver   = 5;
  float  FastestLapTime     = 6;
}

message RaceData
{
  string                  Date       = 1;
  string                  Track      = 2;
  map<int32, ResultData>  Grid       = 3; // key is driver iracing id
  repeated GroupStatsData GroupStats = 4;
}

message ResultData
{
  bool   PolePosition      = 1;
  bool   FastestLap        = 2;
  int32  StartPosition     = 3;
  int32  FinishPosition    = 4;
  int32  Points            = 5;
  int32  CleanDriverPoints = 6;
  float  Interval          = 7;
  int32  Incidents         = 8;
  int32  LapsCompleted     = 9;
  int32  LapsLead          = 10;
  float  Mu                = 11; // Trueskill
  float  Sigma             = 12; // Trueskill
}

